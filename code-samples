Spring

@SpringBootApplication
@RestController
public class FirstApplication {
	@GetMapping("/helloworld")
	public String hello() {
		return "Hello World!";
	}
}

O código acima cria um endpoint que recebe requisições com a URL base do projeto + "/helloworld".
Executando o projeto localmente na porta padrão e realizando uma requisição para "localhost:8080/helloworld" resultará em uma string contendo "Hello World!" como resposta.




























Angular

import { FormGroup, FormControl, Validator, Validators, FormBuilder } from "@angular/forms";

@Component({
  selector: 'app-form-login',
  templateUrl: './form-login.component.html',
  styleUrls: ['./form-login.component.css']
})

export class FormularioLoginComponent {
	public formulario: FormGroup

	constructor(formBuilder: FormBuilder) {
		formBuilder.group({
			email: ['', Validators.required]
			senha: ['', Validators.required]
			senhaConfirmacao: ['', Validators.required]
		})				
	}
}

O código acima representa a criação do arquivo TypeScript de um componente de login, sendo criado um formulário no momento que o componente é construído.



















Flask

from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Olá mundo!"

if __name__ == "__main__":
    app.run()

O código acima representa uma aplicação que apenas imprime o texto “Olá mundo !” na tela.






























NodeJS

// include file system module
var fs = require('fs');
 
// read file nomedoarquivo.txt
fs.readFile('nomedoarquivo.txt',
    // callback function that is called when reading file is done
    function(err, data) {   	
        if (err) throw err;
        // data is a buffer containing file content
        console.log(data.toString('utf8'))
});


O trecho de código acima lê o conteúdo de um arquivo e imprime seu conteúdo na tela.
